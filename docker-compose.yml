  version: '3.8'
  services:
    postgres:
      image: postgres:latest
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: admin
      ports:
        - "5432:5432"
      extra_hosts:
        - "host.docker.internal:172.17.0.1"
    percona:
      image: perconalab/postgres-tde-ext
      environment:
        POSTGRES_PASSWORD: admin
      volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/wewe.sql
      ports:
        - "5433:5432"
      extra_hosts:
        - "host.docker.internal:172.17.0.1"
    keycloak:
      image: quay.io/keycloak/keycloak:23.0.4
      environment:
        PGDATABASE: keycloak
        PGUSER: admin
        PGPASSWORD: admin
        PGHOST: postgres
        PGPORT: 5432
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/keycloak-server.crt.pem
        KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/keycloak-server.key.pem
      volumes:
        - ./keys:/opt/keycloak/conf
        - ./keycloak_data:/opt/keycloak/data/h2
      ports:
        - "8080:8080"
        - "8443:8443"
      command:
        - "start-dev"
    # fastapi:
    #   image: python:3.12
    #   environment:
    #     KEYCLOAK_URL: http://keycloak:8080/
    #     CLIENT_ID: "fastapi-be"
    #     CLIENT_SECRET: 32lfgwv1jLynVSoUpNveN5ieP5qVR9ZJ
    #     REALM_NAME: serenade
    #   volumes:
    #     - ./api:/api
    #   working_dir: /api
    #   command: >
    #     bash -c "pip install --no-cache-dir -r requirements.txt && python main.py"
    #   ports:
    #     - "8000:8000"
    grafana:
      image: grafana/grafana:latest
    #   depends_on:
    #     - keycloak
    #   environment:
    #     GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
    #     GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
    #     GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana-data"
    #     GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "Ut0mhMHSTnA5AKbYDUlgutourwox2q7J"
    #     GF_AUTH_GENERIC_OAUTH_AUTH_URL: "http://keycloak:8080/auth/realms/serenade/protocol/openid-connect/auth"
    #     GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "http://keycloak:8080/auth/realms/serenade/protocol/openid-connect/token"
    #     GF_AUTH_GENERIC_OAUTH_API_URL: "http://keycloak:8080/auth/realms/serenade/protocol/openid-connect/userinfo"
    #     GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(roles[], 'imt') && 'Admin' || 'Viewer'"
    #     GF_SERVER_ROOT_URL: "http://localhost:4000/"
      ports:
        - "4000:3000"
      volumes:
        - grafana_data:/var/lib/grafana
    loki:
      image: grafana/loki:latest
      ports:
        - "3100:3100"
    otel-collector:
      image: otel/opentelemetry-collector-contrib
      volumes:
        - ./otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
      ports:
        - 4317:4317 # OTLP gRPC receiver
        - 4318:4318 # OTLP http receiver
        - 9099:9099
      extra_hosts:
        - "host.docker.internal:host-gateway"
      depends_on:
        - prometheus
        - jaeger
    jaeger:
      image: jaegertracing/all-in-one:1.55
      environment: 
        COLLECTOR_OTLP_ENABLED: "true"
        COLLECTOR_OLTP_GRPC_TLS_ENABLED: "false"
        COLLECTOR_OLTP_HTTP_TLS_ENABLED: "false"
        COLLECTOR_GRPC_TLS_ENABLED: "false"
        COLLECTOR_HTTP_TLS_ENABLED: "false"
        COLLECTOR_ZIPKIN_HOST_PORT: 9411
      ports:
        - 16686:16686
        - 4316:4317
        - 4319:4318
    prometheus:
      image: prom/prometheus:latest
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
      ports:
        - "9090:9090"
      command:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--web.console.libraries=/usr/share/prometheus/console_libraries"
        - "--web.console.templates=/usr/share/prometheus/consoles"  
    ubuntu:
        image: ubuntu:latest
        command: sleep 9999
        extra_hosts:
        - "host.docker.internal:host-gateway"
  volumes:
    grafana_data:
  


  # opentelemetry-instrument --service_name backend --traces_exporter otlp python main.py